package DCPs;

import java.util.Arrays;

/**
 * 
 * Given an array of integers, return a new array such that each 
 * element at index i of the new array is the product of all the 
 * numbers in the original array except the one at i.
 * For example, if our input was [1, 2, 3, 4, 5], 
 * the expected output would be [120, 60, 40, 30, 24]. 
 * If our input was [3, 2, 1], the expected output would be [2, 3, 6].

Follow-up: what if you can't use division?
 * 
 * 
 * 
 * */
public class DCP_2 {

	public static void main(String args[]) {
		//add null check
		//print result using division
		System.out.println(Arrays.toString(divisionSolition(args)));
	}

	private static String[] divisionSolition(String [] list) {
		String [] newList = new String[list[0].length];
		
		//add null check
		int max = Integer.parseInt(list[0]);
		
		//get max value
		for (int i = 1; i < list.length; i++) {
			max *=Integer.parseInt(list[i]);
		}
		
		//calculate values for list
		for (int i = 0; i < newList.length; i++) {
			int entry = max / Integer.parseInt(list[i]);
			newList[i] =  Integer.toString(entry);
		}
		
		return newList;
	}
}
