package DCPs;

import java.util.Arrays;


/**
 * 
 * Given an array of integers, return a new array such that each 
 * element at index i of the new array is the product of all the 
 * numbers in the original array except the one at i.
 * For example, if our input was [1, 2, 3, 4, 5], 
 * the expected output would be [120, 60, 40, 30, 24]. 
 * If our input was [3, 2, 1], the expected output would be [2, 3, 6].

Follow-up: what if you can't use division?
 * 
 * 
 * 
 * */
public class DCP_2 {

	public static void main(String args[]) {
		//add null check
		//print result using division
		System.out.println(divisionSolition(args[0]));
	}

	private static String divisionSolition(String list) {
		
		
		//add null check
	
		//get max value
		int max = calculateProduct(list);
		
		//create string of values
		String newList = calculateProductList(max, list);
		
		
		
		return newList;
	}

	private  String calculateProductList(int max, String list) {
		// TODO Auto-generated method stub
		return null;
	}

	private static int calculateProduct(String list) {
		int currentCommaIndex = list.indexOf(',');

		int max = Integer.parseInt(list.substring(0,currentCommaIndex));
		
		int nextCommaIndex  = list.indexOf(',', currentCommaIndex+1);
		
		while ( currentCommaIndex != -1 ) {
			if(nextCommaIndex ==-1) {
				max *= Integer.parseInt(list.substring(currentCommaIndex+1, list.length()));
				currentCommaIndex =-1;
			}
			
			else {
			max *= Integer.parseInt(list.substring(currentCommaIndex+1, nextCommaIndex));
			currentCommaIndex = nextCommaIndex;
			nextCommaIndex = list.indexOf(',', currentCommaIndex+1);
			}
		}		return max;
	}
}
